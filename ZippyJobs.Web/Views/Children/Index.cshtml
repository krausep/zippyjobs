<h2>Children</h2>
<div class="row">
    <table class="table table-striped table-bordered table-hover table-condensed">
        <thead>
            <tr><th>Name</th><th>Birthday</th><th>Jobs</th><th></th></tr>
        </thead>
        <tbody data-bind="foreach: Children">
            <tr>
                <td><a data-bind="attr: {href: Url, title: Name}"><label data-bind="text: Name"></label></a></td>
                <td data-bind="text: Birthday"></td>
                <td>
                    <ul data-bind="foreach: $root.allJobs">
                        <li data-bind="text: description"></li>
                    </ul>
                </td>
                <td class="btn btn-primary" data-toggle="modal" data-target="#myModal" data-bind="text: 'Edit', click: $root.setSelectedChild"></td>
            </tr>
        </tbody>
    </table>
    <label data-bind="text: LoadingText"></label>
</div>
<div class="row">
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" data-bind="click: $root.cancelChanges"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title" id="myModalLabel">Edit Child</h4>
                </div>
                <div class="modal-body">
                    <div class="row" data-bind="with: selectedChild">
                        <label class="col-md-2" for="nameText">Name</label>
                        <input class="col-md-3" data-bind="value: Name" id="nameText" />
                    </div>
                    <div class="row">
                        <table class="table table-condensed">
                            <thead>
                                <tr><th>Job Description</th><th>Points</th><th>Selected</th></tr>
                            </thead>
                            <tbody data-bind="foreach: $root.allJobs">
                                <tr>
                                    <td data-bind="text: description"></td>
                                    <td data-bind="text: pointValue"></td>
                                    <td><input type="checkbox" data-bind="checked: isJobSelected" /></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-dismiss="modal" data-bind="click: $root.saveChild">Save changes</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" data-bind="click: $root.cancelChanges">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

@Scripts.Render("~/bundles/jquery");
@Scripts.Render("~/bundles/knockout");
<script type="text/javascript">
    function ChildrenViewModel() {
        var self = this;

        self.Children = ko.observableArray();
        self.allJobs = ko.observableArray();
        self.selectedChild = ko.observable();
        self.LoadingText = ko.observable("loading...");

        // Behaviors
        self.setSelectedChild = function (child) {
            self.selectedChild(child);
            setSelectedJobs(child);
        }

        self.cancelChanges = function () {
            loadChildrenData();
        }

        self.saveChild = function () {
            for (var j in viewModel.allJobs()) {
                for (var cj in viewModel.selectedChild().JobInfos()) {
                    if (viewModel.allJobs()[j].jobId == viewModel.selectedChild().JobInfos()[cj].jobId) {
                        viewModel.selectedChild().JobInfos()[cj].isJobSelected(viewModel.allJobs()[j].isJobSelected());
                    }
                }
            }

            viewModel.selectedChild().Jobs([]);
            for (var j in viewModel.selectedChild().JobInfos()) {
                if (viewModel.selectedChild().JobInfos()[j].isJobSelected()) {
                    console.debug("selecting job " + viewModel.selectedChild().JobInfos()[j].jobId());
                    viewModel.selectedChild().Jobs.push(viewModel.selectedChild().JobInfos()[j].jobId());
                    console.debug("jobs: ", viewModel.selectedChild().Jobs());
                }
            }

            console.debug("posting child " + viewModel.selectedChild().ChildId());
            $.post("@ViewBag.ApiUrl", ko.toJS(viewModel.selectedChild()), function (data) {
                loadChildrenData();
            });
        }
    }

    function setSelectedJobs(child) {
        // clear them all out
        for (job in viewModel.allJobs()) {
            viewModel.allJobs()[job].isJobSelected(false);
        }

        // run through the lists and only select the ones that the child has
        for (j in child.Jobs()) {
            for (job in viewModel.allJobs()) {
                if (child.Jobs()[j] == viewModel.allJobs()[job].jobId()) {
                    viewModel.allJobs()[job].isJobSelected(true);
                }
            }
        }
    }

    function jobModel() {
        var self = this;
        self.jobId = ko.observable();
        self.description = ko.observable();
        self.pointValue = ko.observable();
        self.isJobSelected = ko.observable();
    }

    function ChildViewModel() {
        var self = this;
        self.ChildId = ko.observable();
        self.Name = ko.observable();
        self.Birthday = ko.observable(new Date());
        self.Jobs = ko.observableArray();
        self.JobInfos = ko.observableArray();
        self.Url = ko.observable();
    }

    var viewModel = new ChildrenViewModel();

    function loadJobs(ajaxResponse, observableArray) {
        viewModel.allJobs.destroyAll();

        for (var j in ajaxResponse) {
            var job = new jobModel();
            job.jobId(ajaxResponse[j].JobId);
            job.description(ajaxResponse[j].Description);
            job.pointValue(ajaxResponse[j].PointValue);
            job.isJobSelected(false);

            observableArray.push(job);
        }
    }

    function loadChildren(ajaxResponse, observableArray) {
        viewModel.LoadingText("I am loading up stuff. Hold your horses...");

        for (var c in ajaxResponse) {
            var child = new ChildViewModel();
            child.Url("@Request.Url.Scheme" + ":" + "/Children/Edit/" + ajaxResponse[c].ChildId);
            child.Name(ajaxResponse[c].Name);
            child.Birthday(ajaxResponse[c].Birthday);
            child.Jobs(ajaxResponse[c].Jobs);
            //child.JobInfos([]);
            child.ChildId(ajaxResponse[c].ChildId);
            observableArray.push(child);
        }
    }

    function mapChildJobs() {
        for (var c in viewModel.Children()) {
            viewModel.Children()[c].JobInfos([]);
            for (var j in viewModel.allJobs()) {
                for (var childJobIndex in viewModel.Children()[c].Jobs()) {
                    if (viewModel.Children()[c].Jobs()[childJobIndex] == viewModel.allJobs()[j].jobId()) {
                        console.debug("mapped job " + viewModel.allJobs()[j].jobId() + " to child " + viewModel.Children()[c].Name());
                        viewModel.Children()[c].JobInfos().push(viewModel.allJobs()[j]);
                    }
                }
            }
        }
    }

    function loadChildrenData() {
        viewModel.Children([]);
        $.when($.getJSON("@ViewBag.ApiUrl"), $.getJSON("@ViewBag.JobUrl")).done(function (a1, a2) {
            var children = a1[0];
            var jobs = a2[0];
            loadJobs(jobs, viewModel.allJobs);
            loadChildren(children, viewModel.Children);
            mapChildJobs();
            viewModel.LoadingText("Ready");
        });
    }

    $(document).ready(function () {
        loadChildrenData();
        ko.applyBindings(viewModel);

    });
</script>
